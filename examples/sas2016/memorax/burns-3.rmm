/* Dekker's lock with deadlock protection */

forbidden
  CS CS CS
data
  flag1 = 0 : [0:1]
  flag2 = 0 : [0:1]
  flag3 = 0 : [0:1]
  sum= 0 : [0:3]
  check = 0 : [0:1]
  finished2 = 0 : [0:1]
  finished3 = 0 : [0:1]

process
registers
  $r2 = * : [0:1]
  $r3 = * : [0:1]
  $r4 = * : [0:1]
  $r5 = * : [0:1]
  $r6 = * : [0:1]
text
  write: flag1 := 1;
  read: $r2 := flag2;
  read: $r4 := flag3;
  if $r2 = 0 && $r4 = 0 then{
  	    read: $r3 := sum;
  	    write: sum := $r3 + 1;		
	    fence;
	    write: flag1 := 0;
	    read: $r5 := finished2;  
	    read: $r6 := finished3;  
            read: $r3 := sum;
	    if $r3 != 3 && $r5 = 1 && $r6 = 1 then
		CS: write: check := 1
  }
  

process
registers
  $r1 = * : [0:1]
  $r2 = * : [0:1]
  $r4 = * : [0:1]
text
  read: $r1 := flag1;
  if $r1 != 1 then{
	    write: flag2 := 1;
	    read: $r1 := flag1;
	    if $r1 != 1  then{
		  read: $r2 := flag3;
		  if $r2 != 1  then{
	  	  	read: $r4 := sum;	  	
	  	  	write: sum := $r4 + 1;
	  	  	write: flag2 := 0;
	  	  	fence;
	          	write: finished2 := 1;
	      	  	CS: write: check := 1
  	     	}
            }
 }

process
registers
  $r1 = * : [0:1]
  $r2 = * : [0:1]
  $r4 = * : [0:1]
text
  read: $r1 := flag1;
  read: $r2 := flag2;
  if $r1 = 0 && $r2 = 0 then{
	    write: flag3 := 1;
	    read: $r1 := flag1;
	    read: $r2 := flag2;
	     if $r1 = 0 && $r2 = 0 then{
	  	  	read: $r4 := sum;	  	
	  	  	write: sum := $r4 + 1;
	  	  	write: flag2 := 0;
	  	  	fence;
	          	write: finished3 := 1;
	      	  	CS: write: check := 1
  	     }
    }
