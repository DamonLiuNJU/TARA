/* Dekker's lock with deadlock protection */

forbidden
  CS CS
data
  turn = 0 : [0:1]
  flag1 = 0 : [0:2]
  flag2 = 0 : [0:2]
  sum= 0 : [0:3]
  check = 0 : [0:1]
  finished = 0 : [0:1]

process
registers
  $r1 = * : [0:1]
  $r2 = * : [0:1]
  $r3 = * : [0:1]
  $r5 = * : [0:1]
text
  write: flag1 := 1;
  read: $r1 := turn;
  if $r1 = 1 then{
	read: $r2 := flag2;
	if $r2 = 0 then{
	    write: turn := 0;
	    read: $r1 := turn;
	    if $r1 = 0 then{
	            write: flag1 := 2;
		    read: $r2 := flag2;
		    if $r2 != 2 then{
		  	    read: $r3 := sum;
  			    write: sum := $r3 + 1;		
			    write: flag1 := 0;
			    read: $r5 := finished;  
        		    read: $r3 := sum;
			    if $r3 != 2 && $r5 = 1 then
				CS: write: check := 1
  			}
  		}
	}
 }

process
registers
  $r1 = * : [0:1]
  $r2 = * : [0:1]
  $r4 = * : [0:1]
text
  write: flag2 := 1;
  read: $r1 := turn;
  if $r1 = 0 then{
	read: $r2 := flag1;
	if $r2 = 0 then{
	    write: turn := 1;
	    read: $r1 := turn;
	    if $r1 = 1 then{
		    write: flag2 := 2;
		    read: $r2 := flag1;
		    if $r2 != 2 then{
			    read: $r4 := sum;	  	
			    write: sum := $r4 + 1;
			    write: flag2 := 0;
			    fence;
			   write: finished := 1;
			   CS: write: check := 1
  			}
    		}
        }
  }	
