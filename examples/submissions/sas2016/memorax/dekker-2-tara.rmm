/* Dekker's lock with deadlock protection */

forbidden
  CS CS
data
  turn = * : [0:1]
  flag1 = 0 : [0:1]
  flag2 = 0 : [0:1]
  sum= 0 : [0:3]
  check = 0 : [0:1]
  finished = 0 : [0:1]

process
registers
  $r0 = * : [0:1]
  $r1 = * : [0:1]
  $r3 = * : [0:1]
  $r5 = * : [0:1]
  $r4 = * : [0:1]
text
  write: flag1 := 1;
  read: $r0 := flag2;
  if $r0 = 1 then{
        read: $r1 := turn;
	if $r1 = 0 then{
		read: $r0 := flag2;
		if $r0 != 1 then{
			read: $r4 := sum;	  	
		  	write: sum := $r4 + 1;
	  	  	write: turn := 1;
		 	write: flag1 := 0;
			write: flag1 := 1;
			read: $r0 := flag2;
			  if $r0 = 1 then{
				read: $r1 := turn;
				if $r1 = 0 then{
				read: $r0 := flag2;
				if $r0 != 1 then{
					read: $r4 := sum;	  	
				  	write: sum := $r4 + 1;
			  	  	write: turn := 1;
				 	write: flag1 := 0;
					read: $r5 := finished;  
		        	        read: $r3 := sum;
				    	if $r3 != 4 && $r5 = 1 then
						CS: write: check := 1
			  		}
			     }
			}
  		  }
	     }
	}

process
registers
  $r0 = * : [0:1]
  $r1 = * : [0:1]
  $r4 = * : [0:1]
text
  write: flag2 := 1;
  read: $r0 := flag1;
  if $r0 = 1 then{
	read: $r1 := turn;
	if $r1 != 1 then{
		write: flag2 := 0;
		read: $r1 := turn;
		if $r1 = 1 then{
		   write: flag2 := 1;
		   read: $r0 := flag1;
		   if $r0 != 1 then{
		 	read: $r4 := sum;	  	
		  	write: sum := $r4 + 1;
		  	write: turn := 0;
		 	write: flag2 := 0;
			write: flag2 := 1;
		        read: $r0 := flag1;
			  if $r0 = 1 then{
			      read: $r1 := turn;
			      if $r1 != 1 then{
				write: flag2 := 0;
				read: $r1 := turn;
				if $r1 = 1 then{
				    write: flag2 := 1;
				    read: $r0 :=flag1;
			            if $r0 != 1 then{
					read: $r4 := sum;	  	
				  	write: sum := $r4 + 1;
			  	  	write: turn := 0;
				 	write: flag2 := 0;
					fence;
					write: finished := 1;
				    CS: write: check := 1	 
  				}
			     }
			  }
			}
  		      }
		  }
	      }
	}
